apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'androidx.navigation.safeargs'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["android_compile_sdk_version"]
    buildToolsVersion globalConfiguration["android_build_tools_version"]

    signingConfigs {
        release {
            storeFile file('./keystore/release-keystore.jks')
            storePassword 'kla999NBV2018'
            keyAlias 'key0'
            keyPassword 'kla999NBV2018'
        }
    }
    
    defaultConfig {
        applicationId "com.deledzis.localshare"
        minSdkVersion globalConfiguration["android_min_sdk_version"]
        targetSdkVersion globalConfiguration["android_target_sdk_version"]

        multiDexEnabled = true

        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.getStartParameter().getTaskRequests().toString()
        if (runTasks.contains('assembleRelease') || runTasks.contains('aR')) {
            value = 1
        }
        def versionMajor = 1
        def versionMinor = 1
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.deledzis.localshare"
            minSdkVersion 21
            targetSdkVersion 29
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        debug {
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "__${applicationName}_v${variant.versionName}_${formattedDate}.apk"
                }
            }
        }
        release {
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "${applicationName}_v${variant.versionName}_${formattedDate}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    api project(':data')
    api project(':remote')
    api project(':presentation')

    /* Kotlin dependencies */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /* Javax dependencies */
    api "javax.annotation:jsr250-api:$javax_annotation_version"
    implementation "javax.inject:javax.inject:$javax_inject_version"

    /* Navigation component dependencies */
    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-ui:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    /* Dagger dependencies */
    api "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    api "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    /* Testing dependencies */
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
}