apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    signingConfigs {
        release {
            storeFile file('./keystore/release-keystore.jks')
            storePassword 'kla999NBV2018'
            keyAlias 'key0'
            keyPassword 'kla999NBV2018'
        }
    }

    defaultConfig {
        applicationId "com.deledzis.simplemessenger"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.getStartParameter().getTaskRequests().toString()
        if (runTasks.contains('assembleRelease') || runTasks.contains('aR')) {
            value = 1
        }
        def versionMajor = 1
        def versionMinor = 1
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "com.deledzis.localshare"
            minSdkVersion 21
            targetSdkVersion 29
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        debug {
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "__${applicationName}_v${variant.versionName}_${formattedDate}.apk"
                }
            }
            resValue "string", "api_base_url", "https://school.glavdostavka.net/api/"
            resValue "string", "media_base_url", "https://school.glavdostavka.net/media/"
        }
        release {
            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources true

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    def formattedDate = new Date().format('dd.MM.yyyy')
                    outputFileName = "${applicationName}_v${variant.versionName}_${formattedDate}.apk"
                }
            }
        }
    }
    // To inline the bytecode built with JVM target 1.8 into
    // bytecode that is being built with JVM target 1.6. (e.g. navArgs)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    /* Kotlin dependencies */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"

    /* AndroidX dependencies */
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompat_version}"
    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycle_version}"
    implementation "androidx.core:core-ktx:${rootProject.ext.core_ktx_version}"
    implementation "androidx.multidex:multidex:${rootProject.ext.multidex_version}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.constraint_version}"

    /* Navigation component dependencies */
    implementation "androidx.navigation:navigation-fragment:${rootProject.ext.navigation_version}"
    implementation "androidx.navigation:navigation-ui:${rootProject.ext.navigation_version}"
    implementation "androidx.navigation:navigation-fragment-ktx:${rootProject.ext.navigation_version}"
    implementation "androidx.navigation:navigation-ui-ktx:${rootProject.ext.navigation_version}"

    /* OkHttp3 dependencies */
    implementation "com.squareup.okhttp3:okhttp:${rootProject.ext.okhttp_version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.okhttp_version}"

    /* Retrofit2 dependencies */
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofit_version}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.retrofit_version}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofit_version}"

    /* Gson dependencies */
    implementation "com.google.code.gson:gson:${rootProject.ext.gson_version}"

    /* RxJava3 dependencies */
    implementation "io.reactivex.rxjava3:rxjava:${rootProject.ext.rxjava_version}"
    implementation "io.reactivex.rxjava3:rxkotlin:${rootProject.ext.rxkotlin_version}"
    implementation "io.reactivex.rxjava3:rxandroid:${rootProject.ext.rxandroid_version}"

    /* Dagger dependencies */
    api "com.google.dagger:dagger:${rootProject.ext.dagger_version}"
    api "com.google.dagger:dagger-android-support:${rootProject.ext.dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${rootProject.ext.dagger_version}"
    kapt "com.google.dagger:dagger-android-processor:${rootProject.ext.dagger_version}"

    /* Firebase dependencies */
    implementation "com.google.firebase:firebase-analytics:${rootProject.ext.firebase_analytics_version}"
    implementation "com.google.firebase:firebase-crashlytics:${rootProject.ext.firebase_crashlytics_version}"
    implementation "com.google.firebase:firebase-messaging:${rootProject.ext.firebase_messaging_version}"
    implementation "com.google.firebase:firebase-perf:${rootProject.ext.firebase_monitoring_version}"

    /* Glide dependency */
    implementation("com.github.bumptech.glide:glide:${rootProject.ext.glide_version}") {
        exclude group: "com.android.support"
    }

    /* Room dependencies */
    implementation "android.arch.persistence.room:runtime:${rootProject.ext.room_version}"
    implementation "androidx.room:room-coroutines:${rootProject.ext.room_coroutines_version}"
    kapt "android.arch.persistence.room:compiler:${rootProject.ext.room_version}"

    /* Paging dependencies */
    implementation "androidx.paging:paging-runtime-ktx:${rootProject.ext.paging_runtime_version}" // For Kotlin use paging-runtime-ktx
    implementation "androidx.paging:paging-rxjava2-ktx:${rootProject.ext.paging_runtime_version}" // For Kotlin use paging-rxjava2-ktx

    /* Testing frameworks dependencies */
    testImplementation "junit:junit:${rootProject.ext.junit_version}"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.androidx_junit_version}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espresso_core_version}"
}